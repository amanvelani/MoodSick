const MongoClient = require('mongodb').MongoClient;

// MongoDB connection string
const uri = 'mongodb://localhost:27017';

// Create a MongoDB client
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

async function updateGlobalRating(changeEvent) {
    const db = client.db('moodsick_db');
    const songId = changeEvent.fullDocument.song_id;

    // Calculate the average rating for the song
    const averageRating = await db
        .collection('UserRatings')
        .aggregate([
            { $match: { song_id: songId } },
            { $group: { _id: "$song_id", average_rating: { $avg: "$rating" } } }
        ])
        .toArray();

    // Update the global_rating field in the songs collection
    await db.collection('songs').updateOne(
        { _id: songId },
        { $set: { global_rating: averageRating[0].average_rating } }
    );

    console.log(`Updated global rating for song ${songId} to ${averageRating[0].average_rating}`);
}

// async function watchForChanges() {
//     try {
//         await client.connect();
//         const db = client.db('moodsick_db');
//         const userRatingsCollection = db.collection('UserRatings');

//         // Set up a change stream on the user_ratings collection
//         const changeStream = userRatingsCollection.watch();

//         // Listen for changes
//         changeStream.on('change', updateGlobalRating);
//     } finally {
//         // Close the connection when done
//         await client.close();
//     }
// }


async function watchForChanges() {
    try {
        await client.connect();
        const db = client.db('moodsick_db');
        const userRatingsCollection = db.collection('UserRatings');

        // Set up a change stream on the user_ratings collection
        const changeStream = userRatingsCollection.watch();

        // Listen for changes
        changeStream.on('change', updateGlobalRating);

        // Log any errors that occur during the change stream
        changeStream.on('error', (error) => {
            console.error('Change stream error:', error);
        });

    } finally {
        // Close the connection when done
        await client.close();
    }
}

// Start watching for changes
watchForChanges();

